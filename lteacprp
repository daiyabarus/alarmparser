#!/bin/bash
# //////////////////////////////////////////////////////////////////////// #
# Application Name	: alarmparser
# Version						: v.1.0.0
# Author 						: debu69er
# Date 							: May 12, 2020
# Location 					: Uruk Gedang, Neverland
# Comment						:	Retrieve cellstatus, alarm,  packetloss, RSSI
# //////////////////////////////////////////////////////////////////////// #

##: -------------------------------------------------##
##: INITIALIZATION OF VARIABLES
##: -------------------------------------------------##
progname=${0##*/}
author="debu69er"
creationdate="May 12, 2020"
updatedate="-"
description="Retrieve cellstatus, alarm,  packetloss, RSSI"
comment="Don't panic! please report if You find a bug."
version=1.0.0
FOLCURRENT=`pwd`
options=":f:a:cvh"

##: -------------------------------------------------##
##: FUNCTION DEFINITION
##: -------------------------------------------------##
## Usage Function to send the information how to use the tool
usage()
{
printf '\n\e[1;35m%s: %s\e[0m\n\n' "Usage" "${progname} [-f sitelist]"
printf '\e[1;34m%s: %s\e[0m\n' "-f" "sitelist (Mandatory)"
printf '\e[1;34m%s: %s\e[0m\n' "-a" "additional foldername (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-c" "copy datainput to working folder instead of moving (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-h" "show this help message"
printf '\e[1;34m%s: %s\e[0m\n' "-v" "show this tool version"
}

## Version Function
showversion()
{
## drawline2 "Version : ${version}"
printf '\e[1;33m%s version %s\e[0m\n\n' "$progname" "$version"
printf '\e[1;34mby %s, %s\e[0m\n' "$author" "${updatedate}"
printf '\e[1;34m%s\n%s\e[0m\n' "$description" "${comment}"
}

## error catch
error ()
{
	## echo "Error: $1"
	printf '\e[1;31m%s\e[0m\n\n' "Error: $1"
	usage
	exit $2
} >&2

## drawline function
drawline ()
{

dt=`date '+%d/%m/%Y %H:%M:%S'`

	len="${#1} + 26"

	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"

	printf '| \e[1;32m%s : %s\e[0m |\n' "$1" "$dt"

	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

## drawline function
drawline2 ()
{
dt="->"
	len="${#1} + 4"

	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"

	printf '| \e[1;33m%s\e[0m |\n' "$1"

	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

##: -------------------------------------------------##
##: RUN TIME CONFIGURATION AND OPTIONS
##: -------------------------------------------------##
##// checking if no argument (filename)
[[ $# -lt 1 ]] && { printf '\e[1;31m%s\e[0m\n\n' "Missing an argument." >&2; usage ; exit 1; }

while getopts $options opt; do
	case $opt in
		f)FILEOPT="${OPTARG}" ;;
		c)FILECOPY="YES" ;;
		a)FILEADD="${OPTARG}" ;;
		h)usage;exit 0;;
		v)showversion;exit 0;;
		:)error "Option -${OPTARG} is missing an argument" 2;;
		\?)error "Unknown option: -${OPTARG}" 3 ;;
 	esac
done
shift $((OPTIND -1))

## variable declaration

## Folder & Files variable declaration
## current folder
## data file, provided by user
FILEDATA=${FILEOPT}
##----------------------------------------------------------

if [[ ! $FILEDATA ]]; then
	printf '!!! \e[1;31m%s\e[0m !!!\n' "need a filename to proceed" >&2
	usage
	drawline "Terminated "
	exit 1
else
	if [[ ! -e $FILEDATA ]]; then
	 	printf '!!! \e[1;31m%s\e[0m !!!\n' "File ${FILEDATA} is not exists" >&2
	 	drawline "Terminated "
	 	exit 1
	fi
fi

dt=`date '+%d%m%Y'`
if [[ ! $FILEADD ]]; then
	fol="log_${FILEDATA}_${dt}"
else
	fol="${FILEADD}_logparser_${FILEDATA}_${dt}"
fi

## Copying or moving filedata
mkdir "${fol}"
if [[ $FILECOPY ]]; then
	cp "${FILEDATA}" "${fol}/${FILEDATA}"
else
	cp "${FILEDATA}" "${fol}/${FILEDATA}"
fi
cd ${fol}

## processing sign
drawline "Mission Start "
##-----------------
## Mobatch retreiving values
drawline2 "Collecting cellstatus, alarm,  packetloss, RSSI"
mkdir ~/.gconfd/seaplane/alarmparser/data
nohup /opt/ericsson/amos/moshell/mobatch -p 20 -t 120 ${FILEDATA} 'lt all;rbs;rbs;run ~/.gconfd/seaplane/alarmparser/cellstatus;q;' mb_avrets

## egrep
cd mb_avrets
egrep 'm.*C' mobatch_result.txt | nawk '{gsub("no contact","no_contact");print $3";"$1";"$2}' | dos2unix > conn.txt
mv conn.txt ~/.gconfd/seaplane/alarmparser/data/
cd ~/.gconfd/seaplane/alarmparser/data/
egrep 'EUtranCell.DD' *.log | awk '{print $7";"$4";"$6}' | sed -e 's/(//g' | sed -e 's/)//g' | sed -e 's/ENodeBFunction=1,EUtranCell.DD=//g' | dos2unix > cellstatus.txt
egrep 'Major;|Minor;|Critical;|Warning;' *.log | nawk '{gsub(".log:",";");print}' | cut -d';' -f4,5,7,8,9,10 | sed -e 's/,/;/g' | sed -e 's/ManagedElement=//g' | dos2unix > alarm.txt
egrep 'Transport=1 ' *.log | nawk '{gsub(".log:"," ");print $1";"$4}' | cut -d';' -f1,2,3,4,5,6,7 | dos2unix > packetloss.txt
egrep 'RSSI |Counter' *.log | nawk '{gsub(".log:"," ");print $4":"$5":"$6";"$7":"$8";"$9";"$10":"$11";"$12";"$13":"$14}' | dos2unix > rssi.txt
egrep 'rtt ' *.log | nawk '{gsub(".log:"," ");print $1";"$5}' | sed -e 's/\//;/g' | dos2unix > ping.txt


## zip folder
printf '\t\e[1;34m%s\e[0m\n' "- compressing file..."
cd ..
dt=`date '+%d%m%Y_%H.%M'`
rm -R ${fol}
#---------------------------------------------------
mkdir alarm_${dt}
mv ~/.gconfd/seaplane/alarmparser/data/cellstatus.txt alarm_${dt}
mv ~/.gconfd/seaplane/alarmparser/data/conn.txt alarm_${dt}
mv ~/.gconfd/seaplane/alarmparser/data/alarm.txt alarm_${dt}
mv ~/.gconfd/seaplane/alarmparser/data/packetloss.txt alarm_${dt}
mv ~/.gconfd/seaplane/alarmparser/data/rssi.txt alarm_${dt}
mv ~/.gconfd/seaplane/alarmparser/data/ping.txt alarm_${dt}
tar -czvf alarm_${FILEDATA}_${dt}.tar.gz alarm_${dt}
tar -czvf ${fol}.tar.gz data
rm -R  ~/.gconfd/seaplane/alarmparser/data
rm -R  alarm_${dt}
## processing sign
drawline "Mission Completed "
##-----------------

exit 0 




#!/bin/bash
# //////////////////////////////////////////////////////////////////////// #
# Application Name	: alarmparser
# Version						: v.1.1.2
# Author 						: daiyabarus@telco-indonesia.com
# Date 							: May 12, 2020
# Location 					    : Uruk Gedang, Neverland
# Comment						: Retrieve cellstatus, vswr, alarm,  packetloss, RSSI
# //////////////////////////////////////////////////////////////////////// #

##: -------------------------------------------------##
##: INITIALIZATION OF VARIABLES
##: -------------------------------------------------##
progname=${0##*/}
author="debu69er"
creationdate="May 12, 2020"
updatedate="July 1, 2020"
description="Retrieve cellstatus, vswr, alarm,  packetloss, RSSI"
comment="Don't panic! please report if You find a bug."
version=1.1.2
FOLCURRENT=`pwd`
options=":f:a:cvh"

##: -------------------------------------------------##
##: FUNCTION DEFINITION
##: -------------------------------------------------##
## Usage Function to send the information how to use the tool
usage()
{
printf '\n\e[1;35m%s: %s\e[0m\n\n' "Usage" "${progname} [-f sitelist]"
printf '\e[1;34m%s: %s\e[0m\n' "-f" "sitelist (Mandatory)"
printf '\e[1;34m%s: %s\e[0m\n' "-a" "additional foldername (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-c" "copy datainput to working folder instead of moving (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-h" "show this help message"
printf '\e[1;34m%s: %s\e[0m\n' "-v" "show this tool version"
}

## Version Function
showversion()
{
## drawline2 "Version : ${version}"
printf '\e[1;33m%s version %s\e[0m\n\n' "$progname" "$version"
printf '\e[1;34mby %s, %s\e[0m\n' "$author" "${updatedate}"
printf '\e[1;34m%s\n%s\e[0m\n' "$description" "${comment}"
}

## error catch
error ()
{
	## echo "Error: $1"
	printf '\e[1;31m%s\e[0m\n\n' "Error: $1"
	usage
	exit $2
} >&2

## drawline function
drawline ()
{

dt=`date '+%d/%m/%Y %H:%M:%S'`

	len="${#1} + 26"

	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"

	printf '| \e[1;32m%s : %s\e[0m |\n' "$1" "$dt"

	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

## drawline function
drawline2 ()
{
dt="->"
	len="${#1} + 4"

	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"

	printf '| \e[1;33m%s\e[0m |\n' "$1"

	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

##: -------------------------------------------------##
##: RUN TIME CONFIGURATION AND OPTIONS
##: -------------------------------------------------##
##// checking if no argument (filename)
[[ $# -lt 1 ]] && { printf '\e[1;31m%s\e[0m\n\n' "Missing an argument." >&2; usage ; exit 1; }

while getopts $options opt; do
	case $opt in
		f)FILEOPT="${OPTARG}" ;;
		c)FILECOPY="YES" ;;
		a)FILEADD="${OPTARG}" ;;
		h)usage;exit 0;;
		v)showversion;exit 0;;
		:)error "Option -${OPTARG} is missing an argument" 2;;
		\?)error "Unknown option: -${OPTARG}" 3 ;;
 	esac
done
shift $((OPTIND -1))

## variable declaration

## Folder & Files variable declaration
## current folder
## data file, provided by user
FILEDATA=${FILEOPT}
##----------------------------------------------------------

if [[ ! $FILEDATA ]]; then
	printf '!!! \e[1;31m%s\e[0m !!!\n' "need a filename to proceed" >&2
	usage
	drawline "Terminated "
	exit 1
else
	if [[ ! -e $FILEDATA ]]; then
	 	printf '!!! \e[1;31m%s\e[0m !!!\n' "File ${FILEDATA} is not exists" >&2
	 	drawline "Terminated "
	 	exit 1
	fi
fi

dt=`date '+%d%m%Y'`
if [[ ! $FILEADD ]]; then
	fol="LOG_${FILEDATA}"
else
	fol="${FILEADD}_LOGPARSER_${FILEDATA}"
fi

## Copying or moving filedata
mkdir "${fol}"
if [[ $FILECOPY ]]; then
	cp "${FILEDATA}" "${fol}/${FILEDATA}"
else
	mv "${FILEDATA}" "${fol}/${FILEDATA}"
fi
cd ${fol}

## processing sign
drawline "Mission Start "
##-----------------
## Mobatch retreiving values
drawline2 "Collecting cellstatus, vswr, alarm,  packetloss, RSSI"
#Define Folder
mkdir ~/.gconfd/seaplane/alarmparser/data
nohup /opt/ericsson/amos/moshell/mobatch -p 20 -t 15 ${FILEDATA} 'lt all;rbs;rbs;run ~/.gconfd/seaplane/alarmparser/cellstatus;q;' mb_avrets

## egrep
printf '\t\e[1;34m%s\e[0m\n' "- Parsing log..."
python ~/.gconfd/seaplane/alarmparser/vswr.py -f ~/.gconfd/seaplane/alarmparser/data/
#Define Folder
dt=`date '+%Y%m%d_%H%M'`
cd ~/.gconfd/seaplane/alarmparser/data/
egrep 'EUtranCell.DD' *.log | awk '{print $7";"$4";"$6}' | sed -e 's/(//g' | sed -e 's/)//g' | sed -e 's/ENodeBFunction=1,EUtranCell.DD=//g' | perl -ni -e 'print unless /uniq/|/;;/' | grep -v 'Service' | grep -v ';in;' | dos2unix > cellstatus_temp.txt
egrep 'Total: 0 Alarms' *.log | sed -e 's/.log.*/;Clear/g' | awk '{print}' | unix2dos > alarmclear_temp.txt
egrep 'TN_PacketLossBB ' *.log | nawk '{gsub(".log:"," ");print $1";"$4}' | cut -d';' -f1,2,3,4,5,6,7 | dos2unix > packetloss_temp.txt
egrep '^2020-..-.. ' *.log | grep -v 'Transport=1' | grep -v 'TwampTestSession=DSCP_DATA'| grep -v 'TN_PacketLossBB' | nawk '{gsub(".log:"," ");print $1";"$3";"$4}' | dos2unix > rssi_temp.txt
egrep 'rtt ' *.log | nawk '{gsub(".log:"," ");print $1";"$5}' | sed -e 's/\//;/g' | dos2unix > ping_temp.txt
egrep 'Lrat,EventJob=' *.log | nawk '{gsub(".log:"," ");print$1";"$4";"$5}' | dos2unix > eventjob_temp.txt
egrep 'TwampTestSession=DSCP_DATA' *.log | grep -v 'ping' | grep -v '(' | grep -v 'gzip' | nawk '{gsub(".log:"," ");print $1";"$4";"$5";"$6";"$7";"$8";"$9}' | dos2unix > packettwamp_temp.txt
egrep 'Router=vr_LTE_Traffic,TwampInitiator=1' *.log | grep -v 'ping' | nawk '{gsub(".log:"," ");print $1";"$4";"$13}' | sed -e 's/(//g' | sed -e 's/)//g' | dos2unix > twampstatus_temp.txt
egrep '^2020-..-.. ..:..:.. ' *.log | nawk '{gsub(".log:"," ");print}' | sed -e 's/ 2020-..-.. ..:..:.. . /;/g' | sed -e 's/(X2.*//g' | tr -s " " | perl -p -e 's/\t+/ /g' | sed -e 's/,/ /g' | nawk -F';' '$1==last {printf " // %s",$2; next} NR>1 {print "";} {last=$1; printf "%s",$0;} END{print "";}' | dos2unix > alarmall.txt
cat alarmall.txt alarmclear.txt > alarm_temp.txt

#add header
printf '\t\e[1;34m%s\e[0m\n' "- compressing file and delete folder..."
mv ~/.gconfd/seaplane/alarmparser/${fol}/mb_avrets/mobatch_result.txt ~/.gconfd/seaplane/alarmparser/data/
cat mobatch_result.txt | grep 'no contact'  | grep -v '(.*)' |  awk '{print$4}' | unix2dos > cantremote.csv

gawk 'NR==1{1;print "SECTORID;Adm State;Op. State"}1' cellstatus_temp.txt > cellstatus.csv
gawk 'NR==1{1;print "NEID;SECTORID;RSSI"}1' rssi_temp.txt > rssi.csv
gawk 'NR==1{1;print "NEID;ReqState;CurrState"}1' eventjob_temp.txt > eventjob.csv
gawk 'NR==1{1;print "NEID;Problem"}1' alarm_temp.txt > alarm.csv
gawk 'NR==1{1;print "NEID;min;avg;max;mdev"}1' ping_temp.txt > ping.csv
gawk 'NR==1{1;print "NEID;TN_PacketlossBB"}1' packetloss_temp.txt > packetloss.csv
gawk 'NR==1{1;print "NEID;SECTORID;CI;VSWR1;VSWR2"}1' vswr_temp.txt > vswr.csv
gawk 'NR==1{1;print "NEID;administrativeState;operationalState"}1' twampstatus_temp.txt > twampstatus.csv
gawk 'NR==1{1;print "NEID;TWAMP_Latency_Avg;TWAMP_PL_Avg;TWAMP_PL_Max;TWAMP_PL_Min;TWAMP_Packet_Loss_Fwd;TWAMP_Packet_Loss_Rev"}1' packettwamp_temp.txt > packettwamp.csv

tar -czvf ~/.gconfd/seaplane/alarmparser/${dt}_${FILEDATA}_PARSER.tar.gz *.csv
tar -czvf ~/.gconfd/seaplane/alarmparser/${dt}_${FILEDATA}_LOG.tar.gz *.log
rm *.csv
cd ..

#---------------------------------------------------
#mkdir alarm_${dt}
#Define Folder
rm -R  ~/.gconfd/seaplane/alarmparser/data
rm -R ${fol}
## processing sign
drawline "Mission Completed "
##-----------------

exit 0 



